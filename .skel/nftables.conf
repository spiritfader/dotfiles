#!/usr/bin/nft -f
# vim:set ts=2 sw=2 et:

table inet my_table
delete table inet my_table
table inet my_table {
	chain my_input {
		type filter hook input priority filter; policy drop;
		
		# Accept traffic originated from this device
		ct state established,related accept
		
		# Accept any loopback traffic
		iif "lo" accept comment "accept loopback traffic"

		# drop invalid connections
		ct state invalid drop
		
		# accept neighbour discovery otherwise IPv6 connectivity breaks
        #icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept comment "Accept Ipv6 NDP traffic"
		
		#meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, echo-reply, parameter-problem, mld-listener-query, mld-listener-report, mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report } accept comment "Accept ICMPv6"
		#meta l4proto icmp icmp type { destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } accept comment "Accept ICMP"
		
		meta l4proto icmp accept comment "accept IPv4 ICMP echo request (ping)"
		meta l4proto icmp icmp type echo-request limit rate over 10/second burst 4 packets drop comment "No ping floods"

		meta l4proto ipv6-icmp accept comment "accept IPv6 ICMP echo request (ping)"
		meta l4proto ipv6-icmp icmpv6 type echo-request limit rate over 10/second burst 4 packets drop comment "No ping floods"

		ip protocol igmp accept comment "accept IGMP connections"
		
		# New UDP traffic jumps to UDP chain
		meta l4proto udp ct state new jump my_udp_chain
		
		# New TCP traffic jumps to TCP chain
		meta l4proto tcp tcp flags & (fin|syn|rst|ack) == syn ct state new jump my_tcp_chain
		
		# Reject all traffic not processed by other rules
		meta l4proto udp reject comment "reject all udp traffic not processed by other rules"
		meta l4proto tcp reject with tcp reset comment "reject all tcp traffic not processed by other rules"
		
		# Log and output all dropped packets to journal
		#counter log prefix "Packet dropped: " flags all drop	
	}

	chain my_forward {
		type filter hook forward priority filter; policy drop;
		# Drop everything forwarded to us. We do not forward. That is the routers job.
	}

	chain my_output {
		type filter hook output priority filter; policy accept;
		# Accept every outbound connection
	}

	chain my_tcp_chain {
		#tcp dport 22 accept comment "accept SSH connections"
		tcp dport 22 ct state new limit rate 15/minute accept comment "Accept SSH and prevent bruteforce"
		#tcp dport 80 accept comment "accept HTTP web server (Octoprint)"
		#tcp dport 443 accept comment "accept HTTPS web server (Octoprint)"
		#tcp dport 32400 accept comment "accept Plex Media Server"
		#tcp dport 32469 accept comment "accept Plex Media DLNA Server"
	}

	chain my_udp_chain {
		#udp dport 1900 accept comment "accept UPNP (Plex DLNA, Octoprint)"
		udp dport 546 accept comment "accept reply from DHCPV6 client"
		udp dport 5353 ip6 daddr ff02::fb accept comment "accept MDNS for IPv6"
		udp dport 5353 ip daddr 224.0.0.251 accept comment "accept MDNS for IPv4"
		#udp dport {32410,32412,32413,32414} accept comment "accept GDM network discovery for Plex Media Server"
	}
}