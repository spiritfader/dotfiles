#!/usr/bin/nft -f
# vim:set ts=2 sw=2 et:

table inet my_table
delete table inet my_table
table inet my_table {
	chain my_input {
		type filter hook input priority filter; policy drop;
		
		# Accept traffic originated from this device
		ct state established,related accept
		
		# Accept any loopback traffic
		iif "lo" accept

		# drop invalid connections
		ct state invalid drop
		
		# accept neighbour discovery otherwise IPv6 connectivity breaks
                icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept

		# Allow icmp for ipv4/ipv6 and allow igmp
		#meta l4proto ipv6-icmp accept
		#meta l4proto icmp accept
		#ip protocol igmp accept
		
		# New UDP traffic jumps to UDP chain
		meta l4proto udp ct state new jump my_udp_chain
		
		# New TCP traffic jumps to TCP chain
		tcp flags syn / fin,syn,rst,ack ct state new jump my_tcp_chain
		
		# Reject all traffic not processed by other rules
		meta l4proto udp reject
		meta l4proto tcp reject with tcp reset
		
		# Log and output all dropped packets to journal
		#counter log prefix "Packet Dropped: " flags all drop  
	}

	chain my_forward {
		type filter hook forward priority filter; policy drop;
		# Drop everything forwarded to us. We do not forward. That is the routers job.
	}

	chain my_output {
		type filter hook output priority filter; policy accept;
		# Accept every outbound connection
	}

	chain my_tcp_chain {
	}

	chain my_udp_chain {
		
		# Allow Multicast DNS
		#udp dport mdns ip6 daddr ff02::fb accept
		#udp dport mdns ip daddr 224.0.0.251 accept
	}
}
